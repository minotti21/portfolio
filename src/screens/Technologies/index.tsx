import { useState } from "react";

import {
  TechnologyInfoSpan,
  TechnologyInfoText,
  TechnologyInfoTitle,
  ExperienceText,
  StyledMiddleText,
  StyledTechnologyImage,
  TechnologiesImageContainer,
  TechnologyInfoContainer,
  TechnologiesContainer,
  TechnologieImageBackground,
} from "./styles";
import SectionContainer from "@/components/Section";
import Title from "@/components/Title";

export default function Technologies() {
  const [currentSkill, setCurrentSkill] = useState("");
  const tecnologyInfo = "Passe o mouse sobre as tecnologias acima üëÜ";

  let technologyText = <TechnologyInfoSpan>{tecnologyInfo}</TechnologyInfoSpan>;

  switch (currentSkill) {
    case "html": {
      technologyText = (
        <>
          <TechnologyInfoTitle>HTML</TechnologyInfoTitle>
          <TechnologyInfoText>
            A primeira linguagem da tr√≠ade front-end, por√©m, n√£o se trata de uma
            linguagem de programa√ß√£o e sim de marca√ß√£o, cont√©m toda a sem√¢ntica
            de um site e pode se dizer que √© tamb√©m seu esqueleto.
          </TechnologyInfoText>
          <TechnologyInfoText>
            HTML significa HyperText Markup Language (Linguagem de Marca√ß√£o de
            Hipertexto em portgu√™s) e foi criado em uma organiza√ß√£o europeia de
            pesquisa nuclear para facilitar o compartilhamento de documentos
            feitos no computador.
          </TechnologyInfoText>
          <ExperienceText>
            Tempo de experi√™ncia: 2 anos e 5 meses
          </ExperienceText>
        </>
      );

      break;
    }
    case "css": {
      technologyText = (
        <>
          <TechnologyInfoTitle>CSS</TechnologyInfoTitle>
          <TechnologyInfoText>
            A segunda linguagem da tr√≠ade front-end, essa aqui √© uma linguagem
            de estilo, com ela podemos dar cor ao nosso HTML e tamb√©m posicionar
            elementos de forma mais simples.
          </TechnologyInfoText>
          <TechnologyInfoText>
            CSS significa Cascading Style Sheets (Folha de Estilo em Cascatas em
            portugu√™s) e permitiu que os desenvolvedores separassem o arquivos
            de estilo e texto, trazendo mais organiza√ß√£o aos projetos.
          </TechnologyInfoText>
          <ExperienceText>
            Tempo de experi√™ncia: 2 anos e 5 meses
          </ExperienceText>
        </>
      );

      break;
    }
    case "sass": {
      technologyText = (
        <>
          <TechnologyInfoTitle>SASS</TechnologyInfoTitle>
          <TechnologyInfoText>
            Um pr√©-processador para o CSS, nos fornece uma sintaxe mais
            simplificada, permitindo escrever o mesmo c√≥digo com menos linhas
            fornecendo recursos muito √∫teis e inovadores.
          </TechnologyInfoText>
          <TechnologyInfoText>
            SASS significa Syntactically Awesome Stylesheets (Folhas de Estilo
            Incrivelmente Sint√°ticas em portugu√™s), como o navegador fornece
            suporte ao SASS, ele √© transpilado para o CSS no momento que o
            projeto √© buildado.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 2 anos</ExperienceText>
        </>
      );

      break;
    }
    case "tailwind": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Tailwind</TechnologyInfoTitle>
          <TechnologyInfoText>
            Um framework que utiliza o conceito de Atomic CSS, tem uma grande
            lista de classes pr√© definidas que s√£o uma abrevia√ß√£o das
            propriedades do CSS, podendo ser reutilizadas.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Diferente de grande parte dos frameworks, √© altamente flex√≠vel,
            podendo ser personalizado do seu jeito. Na hora de buildar o projeto
            para produ√ß√£o, remove todas as classes n√£o utilizadas, reduzindo o
            tamanho do arquivo final.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 10 meses</ExperienceText>
        </>
      );

      break;
    }
    case "styled": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Styled Components</TechnologyInfoTitle>
          <TechnologyInfoText>
            Uma tecnologia que nos permite estilizar a n√≠vel de componente, traz
            grande flexibilidade e facilidade na hora da implementa√ß√£o e
            manuten√ß√£o do c√≥digo (esse portf√≥lio est√° sendo codado com ele üòÖ)
          </TechnologyInfoText>
          <TechnologyInfoText>
            Foi criado com foco no React, com a inten√ß√£o de inovar e solucionar
            algumas limita√ß√µes que eram comuns na hora de estilizar um
            componente, √© bem √∫til em projetos que necessitam de l√≥gica nos
            estilos.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano e 6 meses</ExperienceText>
        </>
      );

      break;
    }
    case "javascript": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Javascript</TechnologyInfoTitle>
          <TechnologyInfoText>
            A terceira e √∫ltima linguagem da tr√≠ade do front-end, uma linguagem
            de programa√ß√£o interpretada que trouxe grande dinamismo para os
            sites e foi crescendo exponencialmente com o passar do tempo.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Foi desenvolvida em apenas 10 dias, levou "Java" em seu nome para
            surfar no hype da √©poca, pode ser utilizada para desenvolver sites,
            APIs, aplicativos m√≥veis, aplica√ß√µes desktop, machine learning,
            internet das coisas, etc.
          </TechnologyInfoText>
          <ExperienceText>
            Tempo de experi√™ncia: 2 anos e 4 meses
          </ExperienceText>
        </>
      );

      break;
    }
    case "typescript": {
      technologyText = (
        <>
          <TechnologyInfoTitle>TypeScript</TechnologyInfoTitle>
          <TechnologyInfoText>
            Foi desenvolvido pela Microsoft com o intuito de solucionar todos os
            problemas que o JavaScript puro tem, o maior deles, claro: sua
            tipagem fraca. √â essencial para detectar erros durante o
            desenvolvimento e escalar projetos.
          </TechnologyInfoText>
          <TechnologyInfoText>
            O framework Angular (desenvolvido pela Google) utiliza o TypeScript
            por padr√£o. Traz tamb√©m alguns recursos para orienta√ß√£o a objeto,
            √© √≥timo para manter o c√≥digo organizado sem a utiliza√ß√£o de
            frameworks.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano e 6 meses</ExperienceText>
        </>
      );

      break;
    }
    case "react": {
      technologyText = (
        <>
          <TechnologyInfoTitle>React</TechnologyInfoTitle>
          <TechnologyInfoText>
            A biblioteca queridinha dos programadores front-end, segue a
            categoria de SPA (Single Page Application), √© orientada a
            componentes e foi desenvolvida pelo time do Facebook para gerenciar
            melhor o estado e o reaproveitamento de c√≥digo.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Conta com muitos benef√≠cios para web, mas tem tamb√©m sua vers√£o para
            desenvolvimento de aplicativos m√≥veis, o React Native, trabalho
            utilizando ele e particularmente, sou um grande estusiasta das duas
            tecnologias.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 2 anos</ExperienceText>
        </>
      );

      break;
    }
    case "redux": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Redux</TechnologyInfoTitle>
          <TechnologyInfoText>
            Biblioteca feita para gerenciamento de estados complexos no React
            (pois os recusors oferecidos n√£o eram suficientes para grandes
            projetos) e acabou ganhando grande popularidade entre os
            desenvolvedores.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Torna o gerenciamento de estado global mais robusto e previs√≠vel,
            segue o padr√£o de arquitetura Flux. Nos √∫ltimos tempos acabou
            perdendo um pouco de for√ßa por conta da poderosa combina√ß√£o de hooks
            useContext e useReducer do React.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano e 4 meses</ExperienceText>
        </>
      );

      break;
    }
    case "next": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Next</TechnologyInfoTitle>
          <TechnologyInfoText>
            Next √© um framework para o React, foi desenvolvido com o intuito de
            facilitar e melhorar funcionalidades j√° existentes, lidar com rotas
            √© mais simples, tem suporte a renderiza√ß√£o do lado do servidor e pr√©
            renderiza√ß√£o est√°tica.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Na documenta√ß√£o oficial do React, o Next √© recomendado como
            principal framework para desenvolvimento de aplica√ß√µes, oferece at√©
            mesmo recursos para desenvolvimento de c√≥digo no lado do servidor.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano</ExperienceText>
        </>
      );

      break;
    }
    case "node": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Node</TechnologyInfoTitle>
          <TechnologyInfoText>
            Node √© um ambiente de execu√ß√£o que nos permite executar JavaScript
            at√© mesmo em uma geladeira inteligente. √â baseado em eventos,
            permitindo que diferentes requisi√ß√µes possam ser processadas
            simultaneamente.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Com ele, surgiu o NPM (Node Package Manager), utilizado para lidar
            com bibliotecas de terceiros nos projetos. Geralmente √© utilizado
            para desenvolvimento de APIs, aplica√ß√µes em tempo real, frameworks
            para desenvolvimento de interfaces, etc.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano</ExperienceText>
        </>
      );

      break;
    }
    case "express": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Express</TechnologyInfoTitle>
          <TechnologyInfoText>
            Um framework para o Node, projetado para facilitar o desenvolvimento
            de APIs na web. √â simples de configurar e tem uma sintaxe muito
            amig√°vel.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Essencial para cria√ß√£o de APIs Restful e praticamente obrigat√≥rio
            para qualquer desenvolvedor de Node na web, tem uma estrutura leve e
            poderosa auxiliando a lidar com rotas, middlewares e manipula√ß√µes de
            diferentes tipos de requisi√ß√£o.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano</ExperienceText>
        </>
      );

      break;
    }
    case "java": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Java</TechnologyInfoTitle>
          <TechnologyInfoText>
            Linguagem de programa√ß√£o com tipagem forte e orientada a objeto,
            Java foi lan√ßado com o intuito de rodar em qualquer tipo de
            eletr√¥nico (qualquer mesmo), bastando apens ter sua m√°quina virtual
            que √© capaz de compilar seu c√≥digo.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Ganhou grande popularidade por conta de sua portabilidade e
            seguran√ßa, ainda √© muito utilizada para projetos robustos e mobile.
            Al√©m da possibilidade de desenvolver APIs para web com o framework
            Spring Boot.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano</ExperienceText>
        </>
      );

      break;
    }
    case "android": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Android</TechnologyInfoTitle>
          <TechnologyInfoText>
            Surgiu com a premissa de desenvolver sistemas operacionais para
            c√¢meras, mas viu uma grande oportunidade com o surgimento dos
            smartphones, foi adquirido pela Google e logo dominou o mercado de
            software dessa √°rea.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Sua principal linguagem de programa√ß√£o √© o Java, tornando-o um
            sistema bem robusto, por√©m, a mesma vem sendo substitu√≠da pela
            linguagem Kotlin no desenvolvimento Android, linguagem de uso mais
            din√¢mico e conciso.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 8 meses</ExperienceText>
        </>
      );

      break;
    }
    case "database": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Banco de Dados</TechnologyInfoTitle>
          <TechnologyInfoText>
            Os bancos de dados surgiram com a necessidade de armazenar dados de
            contextos variados. Atualmente s√£o indispens√°veis em qualquer √°rea,
            contendo todos os dados de uma aplica√ß√£o.
          </TechnologyInfoText>
          <TechnologyInfoText>
            H√° bancos de dados relacionais (organizado a partir de tabelas,
            linhas e colunas) e os n√£o relacionais (organizado a partir de
            documentos como JSON, chave-valor, etc).
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 1 ano e 6 meses</ExperienceText>
        </>
      );

      break;
    }
    case "git": {
      technologyText = (
        <>
          <TechnologyInfoTitle>Git</TechnologyInfoTitle>
          <TechnologyInfoText>
            Um sistema de gerenciamento de vers√µes, permitindo com que v√°rios
            desenvolvedores trabalhem em um projeto simultaneamente. Utiliza um
            reposit√≥rio remoto ou local para hospedar o projeto.
          </TechnologyInfoText>
          <TechnologyInfoText>
            Esse reposit√≥rio √© separado por branchs master (projeto em produ√ß√£o)
            e dev (projeto em fase de desenvolvimento), os desenvolvedores tem
            uma c√≥pia local do projeto e podem passar suas altera√ß√µes conforme
            necessidade.
          </TechnologyInfoText>
          <ExperienceText>Tempo de experi√™ncia: 2 anos</ExperienceText>
        </>
      );

      break;
    }
    default: {
      technologyText = <TechnologyInfoSpan>{tecnologyInfo}</TechnologyInfoSpan>;
    }
  }

  return (
    <SectionContainer id="technologies">
      <TechnologiesContainer>
        <Title style={{ marginBottom: "0.4em" }}>Tecnologias</Title>
        <StyledMiddleText>
          Depois de muita dedica√ß√£o, consegui um emprego
          como desenvolvedor full stack e aprimorei ainda mais meus
          conhecimentos. Logo abaixo, voc√™ vai encontrar as tecnologias que
          utilizo, um breve resumo feito por mim e tamb√©m o tempo que tenho de
          experi√™ncia com cada uma:
        </StyledMiddleText>

        <TechnologiesImageContainer>
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("html")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/html.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("css")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/css.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("sass")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/sass.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("tailwind")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/tailwind.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("styled")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/styled.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("javascript")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/javascript.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("typescript")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/typescript.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("react")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/react.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("redux")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/redux.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <TechnologieImageBackground>
            <StyledTechnologyImage
              onMouseEnter={() => setCurrentSkill("next")}
              onMouseLeave={() => setCurrentSkill("")}
              src="/next.svg"
              width={80}
              height={80}
              alt="icon"
            />
          </TechnologieImageBackground>
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("node")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/node.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <TechnologieImageBackground>
            <StyledTechnologyImage
              onMouseEnter={() => setCurrentSkill("express")}
              onMouseLeave={() => setCurrentSkill("")}
              src="/express.svg"
              width={80}
              height={80}
              alt="icon"
            />
          </TechnologieImageBackground>
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("java")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/java.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("android")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/android.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("database")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/database.svg"
            width={80}
            height={80}
            alt="icon"
          />
          <StyledTechnologyImage
            onMouseEnter={() => setCurrentSkill("git")}
            onMouseLeave={() => setCurrentSkill("")}
            src="/git.svg"
            width={80}
            height={80}
            alt="icon"
          />
        </TechnologiesImageContainer>

        <TechnologyInfoContainer>{technologyText}</TechnologyInfoContainer>
      </TechnologiesContainer>
    </SectionContainer>
  );
}
